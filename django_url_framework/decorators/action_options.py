__author__ = 'zeraien'


def name(action_name):
    """custom action name, does not override prefix"""
    def decorator(action_function):
        """custom action name, does not override prefix"""
        action_function.action_name = action_name
        return action_function
    return decorator

def prefix(action_prefix):
    """
    Assign a prefix for the action, applies even if
    you set action_name (template name is based on action_name, sans prefix)

    The prefix will not be taken into account when determining template filenames.
    """
    def decorator(action_function):
        action_function.action_prefix = action_prefix
        return action_function
    return decorator

def template_name(_template_name):
    """custom template filename"""
    def decorator(action_function):
        action_function.template_name = _template_name
        return action_function
    return decorator

def named_url(_named_url):
    """A named url that django can use to call this function. Default is controller_action"""
    def decorator(action_function):
        action_function.named_url = _named_url
        return action_function
    return decorator

def ajax_template_name(_template_name):
    """template filename for ajax responses"""
    def decorator(action_function):
        action_function.ajax_template_name = _template_name
        return action_function
    return decorator

def urlconf(pattern_list, erase_autogenerated=False):
    """
    A custom url configuration for this action, just like in Django's urls.py.
    The custom urlconf applies after the urlconf for the controller, unless erase is true.

    Example: `["/user/(?P<user_id>\d+)/"]`

    :param pattern_list: list of url patterns
    :param erase_autogenerated: erase the urlconf that was automatically generated
    """
    def decorator(action_function):
        action_function.urlconf = pattern_list
        action_function.urlconf_erase = erase_autogenerated
        return action_function
    return decorator

def url_parameters(params, erase_autogenerated=False):
    """
    A string representing the argument part of the URL for this action, for instance:
    The action 'user' is given the URL /user/, by adding r'(?P<user_id>\d+)' as the
    url_parameters switch, the URL becomes /user/(?P<user_id>\d+)/.
    The action function has to accept the specified arguments as method parameters.

    :param params: list of url parameters
    :param erase_autogenerated: Whether to erase the default URL-conf for this action and just keep the custom one
    """
    def decorator(action_function):
        action_function.url_parameters = params
        action_function.urlconf_erase = erase_autogenerated
        return action_function
    return decorator

def disable_filters(action_function):
    """disable before_filter and after_filter for this action"""
    action_function.disable_filters = True
    return action_function
